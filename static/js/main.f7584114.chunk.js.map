{"version":3,"sources":["constants.js","App.js","reportWebVitals.js","index.js"],"names":["GHOST_TYPES","id","name","evidence","EVIDENCE","App","state","activeEvidence","lookupGhost","_addActiveEvidence","bind","_removeActiveEvidence","evId","evIds","concat","this","filter","setState","length","console","log","newArray","push","num","i","indexOf","ghost","map","button","activeEvidenceFull","isActiveEvidence","isDisabled","evidenceClasses","join","className","type","disabled","onClick","_handleEvidenceClick","possibleGhosts","notThisGhost","forEach","pieceOfEvidence","_handleGhostButtonClick","evidenceId","item","find","element","_renderEvidenceButtons","_renderGhostDetails","_renderPossibleGhosts","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f7584114.chunk.js","sourcesContent":["export const GHOST_TYPES = [\n  {\n    id: 1,\n    name: 'Banshee',\n    evidence: [1, 2, 3],\n  },\n  {\n    id: 2,\n    name: 'Demon',\n    evidence: [3, 5, 6],\n  },\n  {\n    id: 3,\n    name: 'Jinn',\n    evidence: [1, 4, 6],\n  },\n  {\n    id: 4,\n    name: 'Mare',\n    evidence: [3, 4, 6],\n  },\n  {\n    id: 5,\n    name: 'Oni',\n    evidence: [1, 5, 6],\n  },\n  {\n    id: 6,\n    name: 'Phantom',\n    evidence: [1, 3, 4],\n  },\n  {\n    id: 7,\n    name: 'Poltergeist',\n    evidence: [2, 4, 6],\n  },\n  {\n    id: 8,\n    name: 'Revenant',\n    evidence: [1, 2, 5],\n  },\n  {\n    id: 9,\n    name: 'Shade',\n    evidence: [1, 4, 5],\n  },\n  {\n    id: 10,\n    name: 'Spirit',\n    evidence: [2, 5, 6],\n  },\n  {\n    id: 11,\n    name: 'Wraith',\n    evidence: [2, 3, 6],\n  },\n  {\n    id: 12,\n    name: 'Yurei',\n    evidence: [3, 4, 5],\n  }\n]\n\nexport const EVIDENCE = [\n  {\n    id: 1,\n    name: 'EMF Level 5',\n  },\n  {\n    id: 2,\n    name: 'Fingerprints'\n  },\n  {\n    id: 3,\n    name: 'Freezing Temps'\n  },\n  {\n    id: 4,\n    name: 'Ghost Orb'\n  },\n  {\n    id: 5,\n    name: 'Ghost Writing'\n  },\n  {\n    id: 6,\n    name: 'Spirit Box'\n  }\n]\n","import React from 'react'\nimport './scss/App.scss'\nimport { EVIDENCE, GHOST_TYPES } from './constants'\n\nexport default class App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      activeEvidence: [],\n      lookupGhost: ''\n    }\n\n    this._addActiveEvidence = this._addActiveEvidence.bind(this)\n    this._removeActiveEvidence = this._removeActiveEvidence.bind(this)\n  }\n\n  _removeActiveEvidence(evId) {\n    // console.log('_removeActiveEvidence', evId)\n    let newArray = [].concat(this.state.activeEvidence)\n\n    const evIds = newArray.filter( id => {\n      return id !== evId\n    })\n\n    this.setState({ activeEvidence: evIds })\n  }\n\n  _addActiveEvidence(evId) {\n    if (this.state.activeEvidence.length >= 3) {\n      console.log('Unclick another piece of evidence first')\n    } else {\n      let newArray = [].concat(this.state.activeEvidence)\n\n      newArray.push(evId)\n\n      let evIds = newArray.filter((num, i) => {\n        return newArray.indexOf(num) === i;\n      });\n\n      this.setState({ activeEvidence: evIds })\n    }\n  }\n\n  _handleGhostButtonClick(ghost) {\n    this.setState({ lookupGhost: ghost })\n  }\n\n  _handleEvidenceClick(evId) {\n    // console.log( 'clicked evidence', evId )\n    const evidenceIsCurrentlyActive = this.state.activeEvidence.indexOf(evId) !== -1\n\n    if (evidenceIsCurrentlyActive) {\n      this._removeActiveEvidence(evId)\n    } else {\n      this._addActiveEvidence(evId)\n    }\n  }\n\n  _renderEvidenceButtons() {\n    return EVIDENCE.map( button => {\n      const activeEvidenceFull = this.state.activeEvidence.length >= 3\n      const isActiveEvidence = this.state.activeEvidence.indexOf(button.id) !== -1\n\n      const isDisabled = !isActiveEvidence && activeEvidenceFull\n\n      const evidenceClasses = [\n        'evidence__button',\n        isActiveEvidence ? 'evidence__button--active' : ''\n      ].join(' ')\n\n      return (\n        <button key={`evidence${button.id}`} className={evidenceClasses} type=\"button\" disabled={isDisabled} onClick={ () => { this._handleEvidenceClick(button.id) }}>\n          { button.name }\n        </button>\n      )\n    })\n  }\n\n  _renderPossibleGhosts() {\n    const { activeEvidence } = this.state\n    let possibleGhosts = GHOST_TYPES\n\n    if (activeEvidence.length > 0) {\n\n      possibleGhosts = GHOST_TYPES.filter( ghost => {\n        let notThisGhost = false\n\n        activeEvidence.forEach( pieceOfEvidence => {\n          const requiredEvidence = ghost.evidence\n          if ( requiredEvidence.indexOf(pieceOfEvidence) === -1 ) {\n            notThisGhost = true\n          }\n        })\n\n        /** Remove ghost from list of possible culprits */\n        if (notThisGhost) return false\n        return true\n      })\n    }\n\n    if (possibleGhosts.length <= 0) {\n      return <div className=\"ghost\">Something is wrong. Double check your evidence again...</div>\n    }\n\n    return possibleGhosts.map( ghost => {\n      return (\n        <button key={`ghosts${ghost.id}`} className=\"ghost__button\" onClick={() => { this._handleGhostButtonClick(ghost) }}>\n          { ghost.name }\n        </button>\n      )\n    })\n  }\n\n  _renderGhostDetails() {\n    const { lookupGhost } = this.state\n\n    return (\n      <div className=\"ghost-details__wrapper\" onClick={ () => { this.setState({ lookupGhost: '' }) }}>\n        <h2>{ lookupGhost.name }</h2>\n        <ul>\n        {\n          lookupGhost.evidence.map( evidenceId => {\n            const item = EVIDENCE.find( element => { return element.id === evidenceId })\n\n            if (item) return <li>{item.name}</li>\n            return null\n          })\n        }\n        </ul>\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"evidence__wrapper\">\n          { this._renderEvidenceButtons() }\n        </div>\n        { this.state.lookupGhost && this._renderGhostDetails() }\n        <div className=\"ghost__wrapper\">\n          { this._renderPossibleGhosts() }\n        </div>\n        <footer>\n          Ghost Journal Companion App\n        </footer>\n      </div>\n    )\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}